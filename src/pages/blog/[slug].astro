---
import BlogLayout from '../../layouts/BlogLayout.astro';
import { getCollection } from 'astro:content';

export async function getStaticPaths() {
  const posts = await getCollection('blog', ({ data }) => !data.draft && !data.private);
  return posts.map((post, index) => ({
    params: { slug: post.slug },
    props: { 
      post,
      prev: index > 0 ? posts[index - 1] : null,
      next: index < posts.length - 1 ? posts[index + 1] : null
    },
  }));
}

const { post, prev, next } = Astro.props;
const { Content } = await post.render();

// Calculate reading time
const wordsPerMinute = 200;
const words = post.body.split(/\s+/).length;
const readingTime = Math.ceil(words / wordsPerMinute);
---

<BlogLayout title={`${post.data.title} | Qiao's Blog`}>
  <article class="max-w-2xl mx-auto px-4 py-12">
    <header class="mb-12">
      <div class="mb-6 flex items-center text-gray-600 text-sm">
        <time datetime={post.data.pubDate.toISOString()}>
          {post.data.pubDate.toLocaleDateString('en-US', {
            year: 'numeric',
            month: 'long',
            day: 'numeric'
          })}
        </time>
        <span class="mx-2">/</span>
        <span>{readingTime} min read</span>
        {post.data.category && (
          <>
            <span class="mx-2">/</span>
            <span>{post.data.category}</span>
          </>
        )}
      </div>
      
      <h1 class="text-4xl font-bold mb-6 leading-tight">{post.data.title}</h1>
      
      {post.data.description && (
        <p class="text-xl text-gray-600 leading-relaxed">{post.data.description}</p>
      )}
    </header>

    <div class="prose prose-lg">
      <Content />
    </div>

    {post.data.tags && (
      <div class="mt-12">
        <div class="flex gap-3 flex-wrap">
          {post.data.tags.map((tag: string) => (
            <a href={`/tags/${tag.toLowerCase()}`} class="text-sm text-gray-600 hover:text-gray-900">
              #{tag}
            </a>
          ))}
        </div>
      </div>
    )}

    <nav class="mt-12 pt-6 border-t border-gray-200 flex justify-between text-sm">
      {prev && (
        <a href={`/blog/${prev.slug}`} class="group flex flex-col">
          <span class="text-gray-600">Newer post</span>
          <span class="group-hover:text-blue-600 transition-colors">{prev.data.title}</span>
        </a>
      )}
      {next && (
        <a href={`/blog/${next.slug}`} class="group flex flex-col ml-auto text-right">
          <span class="text-gray-600">Older post</span>
          <span class="group-hover:text-blue-600 transition-colors">{next.data.title}</span>
        </a>
      )}
    </nav>
  </article>
</BlogLayout>

<style is:global>
  .prose {
    max-width: none;
  }
  
  .prose h2 {
    font-size: 1.75rem;
    margin-top: 2.5em;
    margin-bottom: 1em;
    font-weight: 600;
  }
  
  .prose h3 {
    font-size: 1.5rem;
    margin-top: 2em;
    margin-bottom: 0.75em;
    font-weight: 600;
  }
  
  .prose p {
    margin-bottom: 1.5em;
    line-height: 1.75;
  }

  .prose a {
    color: #2563eb;
    text-decoration: none;
    border-bottom: 1px solid transparent;
    transition: border-color 0.2s;
  }

  .prose a:hover {
    border-bottom-color: currentColor;
  }
  
  .prose ul {
    list-style-type: disc;
    padding-left: 1.5em;
    margin: 1.5em 0;
  }

  .prose ul li {
    margin-bottom: 0.75em;
    line-height: 1.75;
    padding-left: 0.5em;
  }

  .prose ul li:last-child {
    margin-bottom: 0;
  }

  .prose ol {
    list-style-type: decimal;
    padding-left: 1.5em;
    margin: 1.5em 0;
  }

  .prose ol li {
    margin-bottom: 0.75em;
    line-height: 1.75;
    padding-left: 0.5em;
  }

  .prose ol li:last-child {
    margin-bottom: 0;
  }

  .prose code {
    background-color: #f3f4f6;
    padding: 0.2em 0.4em;
    border-radius: 0.25em;
    font-size: 0.875em;
  }

  .prose pre {
    background-color: #1f2937;
    color: #f3f4f6;
    padding: 1.25em;
    border-radius: 0.5em;
    overflow-x: auto;
    margin: 1.5em 0;
  }

  .prose pre code {
    background-color: transparent;
    padding: 0;
    border-radius: 0;
    font-size: 0.875em;
  }

  .prose blockquote {
    border-left: 4px solid #e5e7eb;
    padding-left: 1em;
    margin: 1.5em 0;
    font-style: italic;
    color: #4b5563;
  }

  /* Updated table styles for a more natural look */
  .prose table {
    width: 100%;
    border-collapse: separate;
    border-spacing: 0;
    margin: 1.5em 0;
    font-size: 0.95em;
    line-height: 1.5;
  }

  /* Compact style for tables with fewer columns */
  .prose table:where(th:nth-last-child(-n+3)) {
    width: auto;
    min-width: 50%;
  }

  /* Base styles for table headers */
  .prose table th {
    color: #374151;
    font-weight: 600;
    text-align: left;
    padding: 0.5em 0.75em;
    position: relative;
  }

  /* Base styles for table cells */
  .prose table td {
    padding: 0.5em 0.75em;
    color: #4b5563;
    position: relative;
  }

  /* Separator styles for normal tables */
  .prose table:not(:where(th:nth-last-child(-n+3))) th,
  .prose table:not(:where(th:nth-last-child(-n+3))) td {
    border-bottom: 1px solid #e5e7eb;
  }

  /* Shorter separator styles for compact tables */
  .prose table:where(th:nth-last-child(-n+3)) th::after,
  .prose table:where(th:nth-last-child(-n+3)) td::after {
    content: '';
    position: absolute;
    bottom: 0;
    left: 0.75em;
    right: 0.75em;
    height: 1px;
    background: #e5e7eb;
  }

  /* Remove last row separators */
  .prose table tr:last-child td::after {
    display: none;
  }

  .prose table tr {
    transition: background-color 0.2s ease;
  }

  .prose table tr:hover {
    background-color: #fafafa;
  }

  /* Center align numeric columns */
  .prose table td:not(:first-child) {
    text-align: center;
  }

  .prose table th:not(:first-child) {
    text-align: center;
  }

  /* Additional compact styles for small tables */
  @media (min-width: 768px) {
    .prose table:where(th:nth-last-child(-n+3)) {
      margin-left: 0;
      margin-right: auto;
    }
  }
</style> 